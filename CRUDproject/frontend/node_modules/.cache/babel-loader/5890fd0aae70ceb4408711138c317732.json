{"ast":null,"code":"var _jsxFileName = \"/home/nakatinha/repos/djangoprojects/CRUD/CRUDproject/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Forms from './components/Forms';\nimport ListAddresses from './components/ListAddresses.js';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [listaddresses, setListAddresses] = useState([]);\n\n  function refreshList() {\n    const makeGETRequest = async () => {\n      try {\n        let res = await fetch(\"http://localhost:8000/api/list\", {\n          method: \"GET\"\n        });\n        let resJson = await res.json();\n\n        if (res.status === 200) {\n          setListAddresses(Object.entries(resJson));\n        } else {}\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    makeGETRequest();\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Forms, {\n      listaddresses: listaddresses,\n      refreshList: refreshList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(ListAddresses, {\n      refreshList: refreshList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"l0VjDEJQaO3e83uF4fM7kvNyvFQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Forms","ListAddresses","useState","App","listaddresses","setListAddresses","refreshList","makeGETRequest","res","fetch","method","resJson","json","status","Object","entries","err","console","log"],"sources":["/home/nakatinha/repos/djangoprojects/CRUD/CRUDproject/frontend/src/App.js"],"sourcesContent":["import './App.css';\nimport Forms from './components/Forms'\nimport ListAddresses from './components/ListAddresses.js'\nimport { useState } from 'react';\n\nfunction App() {\n  const [listaddresses, setListAddresses] = useState([]);\n  function refreshList() {\n    const makeGETRequest = async () => {\n      try {\n        let res = await fetch(\"http://localhost:8000/api/list\", {\n          method: \"GET\",\n        });\n        let resJson = await res.json();\n        if (res.status === 200) {\n          setListAddresses(Object.entries(resJson));\n        } else {   \n        }\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    makeGETRequest();\n  }\n  return (\n    <>\n    <Forms listaddresses = {listaddresses} refreshList = {refreshList} />\n    <ListAddresses refreshList = {refreshList}/>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCH,QAAQ,CAAC,EAAD,CAAlD;;EACA,SAASI,WAAT,GAAuB;IACrB,MAAMC,cAAc,GAAG,YAAY;MACjC,IAAI;QACF,IAAIC,GAAG,GAAG,MAAMC,KAAK,CAAC,gCAAD,EAAmC;UACtDC,MAAM,EAAE;QAD8C,CAAnC,CAArB;QAGA,IAAIC,OAAO,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAApB;;QACA,IAAIJ,GAAG,CAACK,MAAJ,KAAe,GAAnB,EAAwB;UACtBR,gBAAgB,CAACS,MAAM,CAACC,OAAP,CAAeJ,OAAf,CAAD,CAAhB;QACD,CAFD,MAEO,CACN;MACF,CATD,CASE,OAAOK,GAAP,EAAY;QACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACD;IACF,CAbD;;IAcAT,cAAc;EACf;;EACD,oBACE;IAAA,wBACA,QAAC,KAAD;MAAO,aAAa,EAAIH,aAAxB;MAAuC,WAAW,EAAIE;IAAtD;MAAA;MAAA;MAAA;IAAA,QADA,eAEA,QAAC,aAAD;MAAe,WAAW,EAAIA;IAA9B;MAAA;MAAA;MAAA;IAAA,QAFA;EAAA,gBADF;AAMD;;GAzBQH,G;;KAAAA,G;AA2BT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}