{"ast":null,"code":"var _jsxFileName = \"/home/nakatinha/repos/djangoprojects/CRUD/CRUDproject/frontend/src/components/ListAddresses.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ListAddresses() {\n  _s();\n\n  const [listaddresses, setListAddresses] = useState();\n  useEffect(() => {\n    let makeGETRequest = async () => {\n      try {\n        let res = await fetch(\"http://localhost:8000/api/list\", {\n          method: \"GET\"\n        });\n        let resJson = await res.json();\n\n        if (res.status === 200) {\n          console.log(resJson);\n          setListAddresses(resJson);\n        } else {}\n      } catch (err) {\n        console.log(err);\n      }\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: listaddresses.map(address => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: address\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 41\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(ListAddresses, \"v0NEuiQgjYql0A1ikAxO7YLstbk=\");\n\n_c = ListAddresses;\nexport default ListAddresses;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListAddresses\");","map":{"version":3,"names":["React","useState","useEffect","ListAddresses","listaddresses","setListAddresses","makeGETRequest","res","fetch","method","resJson","json","status","console","log","err","map","address"],"sources":["/home/nakatinha/repos/djangoprojects/CRUD/CRUDproject/frontend/src/components/ListAddresses.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\n\nfunction ListAddresses() {\n    const [listaddresses, setListAddresses] = useState();\n\n    useEffect (() => {\n        let makeGETRequest = async () => {\n        try {\n          let res = await fetch(\"http://localhost:8000/api/list\", {\n            method: \"GET\",\n          });\n          let resJson = await res.json();\n          if (res.status === 200) {\n            console.log(resJson)\n            setListAddresses(resJson);\n          } else {   \n          }\n        } catch (err) {\n          console.log(err);\n        }\n      };\n\n    }\n    )\n\n\n    \n    return (\n    <>\n        <ul>\n      { listaddresses.map( (address) => <li>{ address }</li>) }\n        </ul>\n    </>\n    )\n}\n\nexport default ListAddresses"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;AAEA,SAASC,aAAT,GAAyB;EAAA;;EACrB,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,EAAlD;EAEAC,SAAS,CAAE,MAAM;IACb,IAAII,cAAc,GAAG,YAAY;MACjC,IAAI;QACF,IAAIC,GAAG,GAAG,MAAMC,KAAK,CAAC,gCAAD,EAAmC;UACtDC,MAAM,EAAE;QAD8C,CAAnC,CAArB;QAGA,IAAIC,OAAO,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAApB;;QACA,IAAIJ,GAAG,CAACK,MAAJ,KAAe,GAAnB,EAAwB;UACtBC,OAAO,CAACC,GAAR,CAAYJ,OAAZ;UACAL,gBAAgB,CAACK,OAAD,CAAhB;QACD,CAHD,MAGO,CACN;MACF,CAVD,CAUE,OAAOK,GAAP,EAAY;QACZF,OAAO,CAACC,GAAR,CAAYC,GAAZ;MACD;IACF,CAdC;EAgBH,CAjBQ,CAAT;EAsBA,oBACA;IAAA,uBACI;MAAA,UACAX,aAAa,CAACY,GAAd,CAAoBC,OAAD,iBAAa;QAAA,UAAMA;MAAN;QAAA;QAAA;QAAA;MAAA,QAAhC;IADA;MAAA;MAAA;MAAA;IAAA;EADJ,iBADA;AAOH;;GAhCQd,a;;KAAAA,a;AAkCT,eAAeA,aAAf"},"metadata":{},"sourceType":"module"}